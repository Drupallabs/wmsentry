<?php

use Drupal\Component\Utility\Xss;
use Drupal\Core\Render\Markup;
use Drupal\wmsentry\Utility\Error;

/**
 * An exact copy of the core function, with the exception
 * being the different include of the Error utility class
 *
 * @see _drupal_error_handler_real
 */
function _wmsentry_error_handler_real($error_level, $message, $filename, $line, $context = null)
{
    if ($error_level & error_reporting()) {
        $types = drupal_error_levels();
        [$severity_msg, $severity_level] = $types[$error_level];
        $backtrace = debug_backtrace();
        $caller = Error::getLastCaller($backtrace);

        // We treat recoverable errors as fatal.
        $recoverable = $error_level == E_RECOVERABLE_ERROR;
        // As __toString() methods must not throw exceptions (recoverable errors)
        // in PHP, we allow them to trigger a fatal error by emitting a user error
        // using trigger_error().
        $to_string = $error_level == E_USER_ERROR && substr($caller['function'], -strlen('__toString()')) == '__toString()';
        _drupal_log_error([
            '%type' => isset($types[$error_level]) ? $severity_msg : 'Unknown error',
            // The standard PHP error handler considers that the error messages
            // are HTML. We mimick this behavior here.
            '@message' => Markup::create(Xss::filterAdmin($message)),
            '%function' => $caller['function'],
            '%file' => $caller['file'],
            '%line' => $caller['line'],
            'severity_level' => $severity_level,
            'backtrace' => $backtrace,
            '@backtrace_string' => (new \Exception())->getTraceAsString(),
        ], $recoverable || $to_string);
    }
    // If the site is a test site then fail for user deprecations so they can be
    // caught by the deprecation error handler.
    elseif (DRUPAL_TEST_IN_CHILD_SITE && $error_level === E_USER_DEPRECATED) {
        $backtrace = debug_backtrace();
        $caller = Error::getLastCaller($backtrace);
        _drupal_error_header(
            Markup::create(Xss::filterAdmin($message)),
            'User deprecated function',
            $caller['function'],
            $caller['file'],
            $caller['line']
        );
    }
}
